"""
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be: 1,2,3,5,8,13,21,34,55,89,...
By considering the terms in the Fibonacci sequence whose values do not exceed N, find the sum of the even-valued terms.
Example:
=> INPUT
    10
    100
=> OUTPUT
    10
    44
"""

"""
There are 3 methods to solve this challenge. First method, by calculating the general suite of Fibonacci terms. Second method, by using a function who give us even-values terms of Fibonacci sequence and we sum them. And last method, by using Fibonacci sequence to determine the terms do not exceed N and sum them.
"""

# 1st Method
from math import sqrt
def U(n):
    alpha = 1 - sqrt(5)/10 - 1/2
    beta = sqrt(5)/10 + 1/2
    r1 = (1 - sqrt(5))/2
    r2 = (1 + sqrt(5))/2
    return round(alpha*(r1**n) + beta*(r2**n))

def method_1(n):
    tab_1 = [U(i) for i in range(n)]
    return sum(i for i in tab_1 if i%2==0 and i<n)


# 2nd Method
def method_2(n):
    if n < 2:
        return 0
    evfib_1 = 0
    evfib_2 = 2
    som = evfib_1 + evfib_2
    while (evfib_2 <= n):
        evfib_3 = 4*evfib_2 + evfib_1
        if evfib_3 > n:
            break
        evfib_1 = evfib_2
        evfib_2 = evfib_3
        som = som + evfib_2
    return som


# 3rd Method
def Fibonacci(n):
    if n == 1:
        return 1
    elif n == 2:
        return 2
    else:
        return Fibonacci(n-1) + Fibonacci(n-2)

def method_3(n):
    tab_1 = [Fibonacci(i) for i in range(1,n)]
    return sum(i for i in tab_1 if i%2==0 and i<n)




if __name__ == "__main__":
    n = int(input())

    print(f"Method 1 => {method_1(n)}")
    print(f"Method 2 => {method_2(n)}")
    print(f"Method 3 => {method_3(n)}")

"""
NB: The third method is heavier than all of methods because of Fibonacci function whiche are a recursive function. The second method is the fastest method.
"""